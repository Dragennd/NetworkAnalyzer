using System.Collections.Concurrent;
using System.Net;
using NetworkAnalyzer.Apps.Models;

namespace NetworkAnalyzer.Apps.GlobalClasses
{
    internal static class DataStore
    {
        #region Global
        // Specifies the root directory used by the Network Analyzer
        public static string DataDirectory { get; } = @"C:\Network Analyzer\";

        // Specifies the directory used to store reports generated by the Network Analyzer
        public static string ReportDirectory { get; } = $@"{DataDirectory}Reports\";

        // Specifies the directory used to store config and ini files
        public static string ConfigDirectory { get; } = $@"{DataDirectory}Config\";

        // Path to the database file in the Network Analyzer directory
        public static string DatabasePath { get; } = $@"{ConfigDirectory}NetworkAnalyzerDB.db";

        // Path to the database file within the app build path
        public static string LocalDatabasePath { get; } = "NetworkAnalyzer.Data.NetworkAnalyzerDB.db";

        // Current build of the application - used to compare to GitHub for notifying the user if a newer version is available
        public static string CurrentBuild { get; } = "1.5.0";

        // Release date for the current build of the application - checked against the manifest in GitHub
        public static string ReleaseDate { get; } = "8/06/2024";
        #endregion

        #region IP Scanner Data
        // Store the data gathered by the IPScannerFunction class
        public static ConcurrentBag<IPScannerData> ScanResults = new();

        // Lock the ScanResults ConcurrentBag to allow for thread-safe access to the bag
        public static readonly object ScanResultsLock = new();

        // Represents the total amount of IP Addresses available to scan in the provided range
        public static int TotalSizeOfSubnetToScan = 0;

        // Represents the total amount of IP Addresses which have been successfully pinged
        public static int TotalActiveIPAddresses = 0;

        // Stores the duration of the scan
        public static string TotalScanDuration { get; set; } = string.Empty;

        // Datetime the scan was performed
        public static string DateScanWasPerformed { get; set; } = string.Empty;

        // Report number for the currently running IP Scanner session
        public static string IPScannerReportID { get; set; } = string.Empty;
        #endregion

        #region Latency Monitor Data
        // Store the data gathered by the LatencyMonitorFunction class live as it is gathered
        public static ConcurrentDictionary<string, ConcurrentQueue<LatencyMonitorData>> LiveSessionData = new();

        // Store the major changes to the LiveData List which will ultimately be written to the report
        public static ConcurrentDictionary<string, ConcurrentQueue<LatencyMonitorData>> ReportSessionData = new();

        // Store the current amount of failed pings per target for use with calculating the status
        public static ConcurrentDictionary<string, int> FailedSessionPackets = new();

        // Store the IP Addresses/DNS Names used for scanning in the LatencyMonitorFunction class
        public static List<string> IPAddresses = new();

        // Store the host name resolved for IP Addresses entered in the LatencyMonitorFunction class
        public static List<IPAddress> ResolvedName = new();

        // Report number for the currently running Latency Monitor session
        public static string LatencyMonitorReportID { get; set; } = string.Empty;

        // Store the total number of packets sent for the duration of the Latency Monitor test
        public static int PacketsSent { get; set; }

        // Store the final duration in  of the monitoring session 
        public static string TotalDuration { get; set; } = "00.00:00:00";

        // Store the start time for the current Latency Monitor session
        public static string? StartTime { get; set; }

        // Store the end time for the current Latency Monitor session
        public static string? EndTime { get; set; }

        // Store the last mode with which data was stored from a Latency Monitor session
        public static ReportType LastLoggedType { get; set; } = ReportType.UserTargets;

        // Clear the Lists shown below prior to starting the next Latency Monitor test
        public static void ClearDataStorage()
        {
            IPAddresses.Clear();
            ResolvedName.Clear();
            LiveSessionData.Clear();
            ReportSessionData.Clear();
            FailedSessionPackets.Clear();
            PacketsSent = 0;
            TotalDuration = "00.00:00:00";
            StartTime = string.Empty;
            EndTime = string.Empty;
        }
        #endregion

        #region Reports Data
        // Store list of all reports in the ReportDirectory
        public static ConcurrentBag<ReportExplorerData> ReportsData = new();
        #endregion Reports Data
    }
}